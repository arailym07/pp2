'''
1.
Репозиторий - хранилище где расположен мой проект и его истории.
 - локальный
 - удаленный. Например GitHub

Ветка - позволяет работать над новыми функциями или изменениями проекта, не затрагивая основную версию.
После завершения работы изменения из ветки можно объединить с основной линией разработки.

Коммит - сохранение изменений в Гит.Он не содержит все файлы из репозитории

Эти данные используются для подписи изменений сделанных вами, что позволяет отслеживать, кто и когда сделал изменения в файле:

   git config --global user.name "Your Name"
   git config --global user.email "your_email@whatever.com"

Мы будем использовать main в качестве имени ветки по умолчанию. Чтобы установить его, выполните следующую команду:

   git config --global init.defaultBranch main

   git config --global core.autocrlf input
   git config --global core.safecrlf warn

   

2.Создание проекта

Создать директорию и файл и ввести: 
  mkdir work
  cd work
  touch hello.html

Теперь у вас есть директория с одним файлом. Чтобы создать Git-репозиторий из этой директории, выполните команду git init.

И теперь добавим в репозиторий страницу «Hello, World»

git add hello.html
git commit -m "Initial Commit"


3.Проверка

git status - чтобы проверить текущее состояние репозитория.


4. Внесение изменений

Добавим кое-какие HTML-теги к нашему приветствию. Измените содержимое файла на:

Файл: hello.html
<h1>Hello, World!</h1>


5.Индексация изменений

Теперь дайте команду Git проиндексировать изменения. Проверьте состояние:

git add hello.html
git status

Результат:
$ git add hello.html
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   hello.html

Изменения файла hello.html были проиндексированы. Это означает, что Git теперь знает об изменении, но изменение пока не перманентно


6. Индексация и коммит

Пример:

git add a.html b.html
git commit -m "Changes for a and b"
git add c.html
git commit -m "Unrelated change to c"


7. Коммит изменений

git commit без -m открывает редактор для ввода сообщения.
Редактор выбирается из следующего списка (в порядке приоритета):

переменная среды GIT_EDITOR
параметр конфигурации core.editor
переменная среды VISUAL
переменная среды EDITOR


8. Изменения, а не файлы

git add hello.html   # добавить конкретный файл
git add .            # добавить все изменения в текущей папке


9. История

Получение списка произведенных изменений — функция команды git log.

--pretty="..." — определяет формат вывода.
%h — укороченный хеш коммита.
%ad — дата коммита.
| — просто визуальный разделитель.
%s — комментарий.
%d — дополнения коммита («головы» веток или теги).
%an — имя автора.
--date=short — сохраняет формат даты коротким и симпатичным.


10.Получение старых версий

Возврат к прошлому коммиту:  git checkout <hash>

Возврат к последнему состоянию ветки:    git switch main


11. Создание тегов версий

Создать тег: git tag v1


12. Отмена локальных изменений

Используйте команду restore, чтобы сбросить содержимое файла hello.html.


13. Отмена проиндексированных изменений

Команда restore с флагом --staged очищает индекс.

Чтобы вернуть и рабочую директорию: git restore hello.html

'''